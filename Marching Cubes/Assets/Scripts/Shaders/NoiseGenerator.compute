static const uint permutation[256] =
{
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225,
    140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148,
    247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32,
    57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175,
    74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122,
    60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54,
    65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169,
    200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64,
    52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212,
    207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213,
    119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
    129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104,
    218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241,
    81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157,
    184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93,
    222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
};

float gradient(uint hash, float x, float y)
{
    // Convert hash code into 8 gradient directions
    uint h = hash & 7;
    float u = h < 4 ? x : y;
    float v = h < 4 ? y : x;
    return ((h & 1) ? -u : u) + ((h & 2) ? -2.0 * v : 2.0 * v);
}

float perlinNoise(float x, float y)
{
    // Determine grid cell coordinates
    int ix0 = floor(x);
    int iy0 = floor(y);
    int ix1 = ix0 + 1;
    int iy1 = iy0 + 1;

    // Determine interpolation weights
    float tx0 = x - ix0;
    float ty0 = y - iy0;
    float tx1 = tx0 - 1.0;
    float ty1 = ty0 - 1.0;

    // Compute hash values for four grid corners
    uint h0 = permutation[ix0 & 255] + iy0;
    uint h1 = permutation[ix1 & 255] + iy0;
    uint h2 = permutation[ix0 & 255] + iy1;
    uint h3 = permutation[ix1 & 255] + iy1;

    // Compute gradient dot products
    float n00 = gradient(permutation[h0], tx0, ty0);
    float n01 = gradient(permutation[h1], tx1, ty0);
    float n10 = gradient(permutation[h2], tx0, ty1);
    float n11 = gradient(permutation[h3], tx1, ty1);

    // Interpolate along x-axis
    float ix0_val = lerp(n00, n01, smoothstep(0, 1, tx0));
    float ix1_val = lerp(n10, n11, smoothstep(0, 1, tx0));

    // Interpolate along y-axis and return final result
    return lerp(ix0_val, ix1_val, smoothstep(0, 1, ty0));
}

float perlinNoise3D(float x, float y, float z)
{
    float ab = perlinNoise(x, y);
    float bc = perlinNoise(y, z); 
    float ca = perlinNoise(z, x);
    
    float ba = perlinNoise(y, x);
    float cb = perlinNoise(z, y);
    float ac = perlinNoise(x, z);
    
    
    return (float) (ab + bc + ca + ba + cb + ac) / 6;
}