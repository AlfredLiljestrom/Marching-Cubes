// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputePoints
#include "Tables.compute"
#include "NoiseGenerator.compute"

struct Point
{
    float3 pos;
    float value;
};

uint3 dim;
float3 startPos;
float3 endPos; 
float size;

float3 midPoint; 

float perlinMultiplier; 
float perlinHeight; 

uint shape; 
RWStructuredBuffer<Point> outputPoints;
RWStructuredBuffer<int> CountBuffer;

int calculateIndex(int x, int y, int z)
{
    return x + y * (dim.x * dim.z) + z * dim.x; 
}

float getValueCircle(float3 pos)
{
    
    float distan = distance(midPoint, pos);
    float perlinNoise = perlinNoise3D(pos.x * perlinMultiplier, pos.y * perlinMultiplier, pos.z * perlinMultiplier) * perlinHeight;
    
    return ((distan - size / 2) - perlinNoise) + 10;
    
}

float getValuePlane(float3 pos)
{
    float noise = perlinNoise(pos.x * perlinMultiplier, pos.z * perlinMultiplier) * perlinHeight;
    return ((pos.y - noise) - (perlinHeight/2) - 30);
}


float3 offset(uint x, uint y, uint z)
{
    float3 step = (endPos - startPos) / (float3(dim.x, dim.y, dim.z) - 1.0f); // Step size
    float xCord = x * step.x;
    float yCord = y * step.y;
    float zCord = z * step.z;

    return float3(xCord, yCord, zCord);
}


[numthreads(8,8,8)]
void ComputePoints(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= dim.x || id.y >= dim.y || id.z >= dim.z)
    {
        return;
    }
    
    
    
    //float3 pos = float3(id.x, id.y, id.z) + offset(id.x, id.y, id.z); 
    float3 pos = startPos + offset(id.x, id.y, id.z);
    float value = 0;
    if (shape == 0)
    {
        value = getValueCircle(pos);
    } 
    else if (shape == 1)
    {
        value = getValuePlane(pos);
    }
    
    Point p;
    p.pos = pos;
    p.value = value;
    
    outputPoints[calculateIndex(id.x, id.y, id.z)] = p;
    InterlockedAdd(CountBuffer[0], 1);
}
